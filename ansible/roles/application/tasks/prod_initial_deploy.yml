---
# Initial deploy only
- name: Create app directory
  file:
    path: "{{ path }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
  become: true

# Initial deploy only
- name: Create general directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
  with_items:
    - "{{ releases_path }}"
    - "{{ shared_path }}"
    - "{{ shared_path }}/tmp"
    - "{{ shared_path }}/log"
    - "{{ shared_path }}/config"
    - "{{ shared_path }}/vendor"
    - "{{ shared_path }}/vendor/bundle"

# Initial deploy only
- name: "Create {{ shared_path }}/config/database.yml"
  template:
    src: database.yml.j2
    dest: "{{ shared_config_path }}/database.yml"
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0600
    backup: yes

# Initial deploy only
- name: "Copy config/secrets.yml to {{ shared_path }}/config"
  copy: 
    src: "../../../../../config/secrets.yml"
    dest: "{{ shared_config_path }}/secrets.yml"
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0600

# Initial deploy only
- name: "Copy .envrc to {{ shared_path }}"
  copy: 
    src: "../../../../../.envrc"
    dest: "{{ shared_path }}/.envrc"
    owner: "{{ user_name }}"
    group: "{{ group_name }}"
    mode: 0600

- set_fact:
    this_release_path: "{{ app_path }}"

- name: Stat most recent git commit
  git:
    repo: "{{ git_url }}"
    dest: "{{ this_release_path }}"
    version: "{{ git_branch }}"
    accept_hostkey: yes
    clone: no
    update: no
  become: false
  register: git

- block:
    - debug:
        msg: "SHA-1 before git update is {{ git.before }}"

    - debug: 
        msg: "SHA-1 after git update is {{ git.after }}"

    - set_fact:
        this_release_path: "{{ releases_path }}/{{ lookup('pipe', 'date +%Y-%m-%d_%H:%M:%S') }}"

    - debug:
        msg: "New release path {{ this_release_path }}"

    - name: Create new release dir
      file:
        path: "{{ this_release_path }}"
        state: directory
        owner: "{{ user_name }}"
        group: "{{ group_name }}"

    - name: Download code
      git:
        repo: "{{ git_url }}"
        dest: "{{ this_release_path }}"
        version: "{{ git_branch }}"
        accept_hostkey: yes
      become: false

    - name: Delete release's shared files
      file:
        path: "{{ this_release_path }}/{{ item }}"
        state: absent
      with_items:
        - config/database.yml
        - config/secrets.yml
        - "config/puma.{{ rails_env }}.rb"
        - log
        - tmp
        - vendor/bundle
        - .envrc

    - name: Symlink shared files
      file:
        src: "{{ shared_path }}/{{ item }}"
        dest: "{{ this_release_path }}/{{ item }}"
        state: link
        force: yes
      with_items:
        - config/database.yml
        - config/secrets.yml
        - "config/puma.{{ rails_env }}.rb"
        - log
        - tmp
        - vendor/bundle
        - .envrc
  when: git.after != git.before

# Initial deploy only
- name: Check if bundler is installed
  command: /bin/bash -l -c 'which bundle'
  args:
    chdir: "{{ this_release_path }}"
  register: bundle_gem_check_result
  changed_when: false # never
  ignore_errors: true

# Initial deploy only
- name: Install bundler
  command: /bin/bash -l -c 'gem install bundler --no-ri --no-rdoc'
  args:
    chdir: "{{ this_release_path }}"
  become: true
  become_user: "{{ ruby_user_name }}"
  when: bundle_gem_check_result.rc != 0

# Not showing idempotent
- name: Install gems
  command: /bin/bash -lc 'bundle install --deployment --without "development test"'
  args:
    chdir: "{{ this_release_path }}"

# Not showing idempotent
- name: Precompile assets
  command: /bin/bash -lc 'bundle exec rake assets:precompile'
  environment:
    RAILS_ENV: "{{ rails_env }}"
  args:
    chdir: "{{ this_release_path }}"

# Not showing idempotent
# Create on initial deploy only
- name: "Create & migrate database"
  command: /bin/bash -lc 'bundle exec rake db:create db:migrate'
  environment:
    RAILS_ENV: "{{ rails_env }}"
  args:
    chdir: "{{ this_release_path }}"

- name: Symlink new release
  file:
    src: "{{ this_release_path }}"
    dest: "{{ app_path }}"
    state: link
    force: yes
  notify: restart application
  when: git.after != git.before
